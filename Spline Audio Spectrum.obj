--track0: 開始位置, 0, 2000, 400
--track1: 終了位置, 0, 2000, 1520
--track2: 周波数帯, 0, 1000, 100
--track3: 高さ, 0, 1000, 200

--dialog: 色/col, local color=0xffffff; 開始周波数, local startFrequency=0; 終了周波数, local endFrequency=400; サンプリングレベル, local sampleLevel=3; 平均化フレーム範囲, local audioDuration=1; サンプリングフレームオフセット, local audioOffset=0; 太さ, local thickness=10; 描画タイプ, local displayOption=0; 描画方向, local sideOption=1; 丸くする/chk, local isRounded=0; 半径, local radius=200;

-------- Import rikky_module --------
package.cpath = package.cpath .. ";" .. obj.getinfo ("script_path"):match ("(.*\\).*\\") .. "?.dll"
local bool, rikky_module = pcall (require, "rikky_module")
if not bool then
	obj.load ("<s100>require rikky_module!")
	obj.draw()
	return
end

-------- Settings --------
obj.setfont ("MS UI Gothic", 50, 0, 0xffffff)
obj.setoption ("drawtarget", "tempbuffer", obj.screen_w, obj.screen_h)

-------- Variables --------
local startPoint = obj.track0 - obj.screen_w / 2
local endPoint = obj.track1 - obj.screen_w / 2
local frequencyBand = obj.track2
local height = obj.track3 / 10000

local totalLength = endPoint - startPoint

local currentFrame, totalFrame = rikky_module.getinfo ("frame")

local spectrumBuffer = {}

error = false

-------- Functions --------
function ShowError (text, m)
	error = true
	obj.load ("text", "Error " .. text .. "! The value is too " .. m)
	obj.draw()
end

function CubicSpline (array, t)
	local a, b, c, d, w = {}, {}, {}, {}, {}
	local arrayLength = #array

	for i = 1, arrayLength do
		a[i] = array[i]
	end

	for i = 1, arrayLength do
		if i == 1 or i == arrayLength then
			c[i] = 0
		else
			c[i] = 3 * (a[i - 1] - 2 * a[i] + a[i + 1])
		end
	end

	for i = 1, arrayLength do
		if i == 1 then
			w[i] = 0
		else
			local tmp = 4 - w[i - 1]
			c[i] = (c[i] - c[i - 1]) / tmp
			w[i] = 1 / tmp
		end
	end

	for i = arrayLength - 1, 1, -1 do
		c[i] = c[i] - c[i + 1] * w[i]
	end

	for i = 1, arrayLength do
		if i == arrayLength then
			d[i] = 0
			b[i] = 0
		else
			d[i] = (c[i + 1] - c[i]) / 3
			b[i] = a[i + 1] - a[i] - c[i] - d[i]
		end
	end

	local i = math.floor (t)
	if i < 1 then
		i = 1
	elseif i >= #a then
		i = #a - 1
	end

	local dt = t - i
	return a[i] + (b[i] + (c[i] + d[i] * dt) * dt) * dt
end

-------- Show Errors --------
if endPoint < startPoint then ShowError ("終了位置", "small for 開始位置") end
if endFrequency < startFrequency then ShowError ("終了周波数", "small for 開始周波数") end
if startFrequency < 0 then ShowError ("開始周波数", "small") end
if endFrequency < 0 then ShowError ("終了周波数", "small") end
if sampleLevel < 0 then ShowError ("サンプルレベル", "small") end
if sampleLevel > 3 then ShowError ("サンプルレベル", "big") end
if thickness < 0 then ShowError ("太さ", "small") end
if displayOption < 0 then ShowError ("ディスプレイオプション", "small") end
if displayOption > 2 then ShowError ("ディスプレイオプション", "big") end
if sideOption < 0 then ShowError ("サイドオプション", "small") end
if sideOption > 2 then ShowError ("サイドオプション", "big") end
if radius < 0 then ShowError ("半径", "small") end

-------- Main -------
if not error then
	local buffer = {}
	for i = 1, audioDuration do
		buffer[i] = {}
	end

	--/ AUDIO /--
	if audioDuration == 1 then
		spectrumBuffer = rikky_module.audiobuffer (currentFrame + audioOffset, "FOURIER", "absolute", "monaural", 1024, sampleLevel, {startFrequency, endFrequency})
	else
		for i = 0, audioDuration - 1 do
			buffer[i + 1] = rikky_module.audiobuffer (currentFrame + i + audioOffset, "FOURIER", "absolute", "monaural", 1024, sampleLevel, { startFrequency, endFrequency })
		end

		for i = 1, #buffer[1] do
			spectrumBuffer[i] = 0
		end

		for i = 1, audioDuration do
			for j = 1, #buffer[i] do
				spectrumBuffer[j] = spectrumBuffer[j] + buffer[i][j] / audioDuration
			end
		end
	end


	--/ 描画 /--
	local space = #spectrumBuffer / frequencyBand
	local positionXBuffer = {}
	for i = 0, frequencyBand - 1 do
		positionXBuffer[i + 1] = totalLength / (frequencyBand - 1) * i + startPoint
	end


	if isRounded == 0 then
		obj.load ("figure", "円", color, thickness)
		if displayOption ~= 1 then
			for i = 1, #positionXBuffer, 1 / (frequencyBand / #positionXBuffer) do
				-- space = math.log (space);
				local spline = math.max (CubicSpline(spectrumBuffer, space * i), 0)
				local index = math.floor (i)

				if displayOption == 0 then
					obj.draw (positionXBuffer[index], 0, 0)
				end

				if sideOption ~= 2 then
					obj.draw (positionXBuffer[index], spline * -height, 0)
				end

				if sideOption ~= 1 then
					obj.draw (positionXBuffer[index], spline * height, 0)
				end
			end
		end

		obj.load ("figure", "四角形", color, 1)
		if displayOption ~= 2 then
			for i = 1, #positionXBuffer, 1 / (frequencyBand / #positionXBuffer) do
				local y = math.max (CubicSpline(spectrumBuffer, space * i), 0)
				local index = math.floor (i)

				local S = {}
				for i = 1, 4 do
					S[i] = {}
					for j = 1, 2 do
						S[i][j] = 0
					end
				end


				S[1][1] = positionXBuffer[i] - (thickness / 2)
				S[1][2] = y * height
				S[2][1] = positionXBuffer[i] + (thickness / 2)
				S[2][2] = y * height

				S[3][1] = positionXBuffer[i] + (thickness / 2)
				S[3][2] = 0
				S[4][1] = positionXBuffer[i] - (thickness / 2)
				S[4][2] = 0

				if sideOption ~= 2 then
					obj.drawpoly (S[1][1], -S[1][2], 0, S[2][1], -S[2][2], 0, S[3][1], S[3][2], 0, S[4][1], S[4][2], 0)
				end

				if sideOption ~= 1 then
					obj.drawpoly (S[1][1], S[1][2], 0, S[2][1], S[2][2], 0, S[3][1], S[3][2], 0, S[4][1], S[4][2], 0)
				end
			end
		end
	else
		for i = 1, #positionXBuffer, 1 / (frequencyBand / #positionXBuffer) do
			local deltaRadian = math.rad (360 / frequencyBand * i)
			local circlePosition = { math.sin(deltaRadian), math.cos(deltaRadian) }
			local deltaSin = math.sin (deltaRadian)
			local deltaCos = math.cos (deltaRadian)

			local spline = math.max (CubicSpline(spectrumBuffer, space * i), 0)
			local index = math.floor (i)

			if displayOption == 0 then
				obj.load ("figure", "円", color, thickness)
				obj.draw (deltaSin * radius, deltaCos * radius, 0)
			end

			if displayOption ~= 1 then
				if sideOption ~= 2 then
					obj.load ("figure", "円", color, thickness * (1 + spline * height / radius))
					obj.draw (deltaSin * (spline * height + radius), deltaCos * (spline * height + radius), 0)
				end

				if sideOption ~= 1 then
					obj.load ("figure", "円", color, thickness * (1 - spline * height / radius))
					obj.draw (deltaSin * (spline * -height + radius), deltaCos * (spline * -height + radius), 0)
				end
			end

			if displayOption ~= 2 then
				local pos = { deltaSin * spline, deltaCos * spline }
				local verticalVector = { deltaCos, -deltaSin }

				obj.load ("figure", "四角形", color, 1)

				local S = {}
				for i = 1, 4 do
					S[i] = {}
					for j = 1, 2 do
						S[i][j] = 0
					end
				end

				if sideOption ~= 2 then
					S[1][1] = deltaSin * (spline * height + radius) + deltaCos * (thickness * (1 + spline * height / radius) / 2)
					S[1][2] = deltaCos * (spline * height + radius) - deltaSin * (thickness * (1 + spline * height / radius) / 2)
					S[2][1] = deltaSin * (spline * height + radius) - deltaCos * (thickness * (1 + spline * height / radius) / 2)
					S[2][2] = deltaCos * (spline * height + radius) + deltaSin * (thickness * (1 + spline * height / radius) / 2)

					S[3][1] = deltaSin * radius - deltaCos * (thickness / 2)
					S[3][2] = deltaCos * radius + deltaSin * (thickness / 2)
					S[4][1] = deltaSin * radius + deltaCos * (thickness / 2)
					S[4][2] = deltaCos * radius - deltaSin * (thickness / 2)

					obj.drawpoly (S[1][1], S[1][2], 0, S[2][1], S[2][2], 0, S[3][1], S[3][2], 0, S[4][1], S[4][2], 0)
				end

				if sideOption ~= 1 then
					S[1][1] = (deltaSin * radius) + deltaCos * (thickness / 2)
					S[1][2] = (deltaCos * radius) - deltaSin * (thickness / 2)
					S[2][1] = (deltaSin * radius) - deltaCos * (thickness / 2)
					S[2][2] = (deltaCos * radius) + deltaSin * (thickness / 2)

					S[3][1] = deltaSin * (math.max(spline * -height, -radius) + radius) - deltaCos * (thickness * (1 - spline * height / radius) / 2)
					S[3][2] = deltaCos * (math.max(spline * -height, -radius) + radius) + deltaSin * (thickness * (1 - spline * height / radius) / 2)
					S[4][1] = deltaSin * (math.max(spline * -height, -radius) + radius) + deltaCos * (thickness * (1 - spline * height / radius) / 2)
					S[4][2] = deltaCos * (math.max(spline * -height, -radius) + radius) - deltaSin * (thickness * (1 - spline * height / radius) / 2)

					obj.drawpoly (S[1][1], S[1][2], 0, S[2][1], S[2][2], 0, S[3][1], S[3][2], 0, S[4][1], S[4][2], 0)
				end
			end
		end
	end
end

-------- Final --------
obj.load ("tempbuffer")
obj.effect()
